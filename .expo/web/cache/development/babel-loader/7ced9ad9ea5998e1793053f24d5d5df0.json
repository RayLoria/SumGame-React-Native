{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Number from \"./Number\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default Game = function Game(_ref) {\n  var randomNumbersCount = _ref.randomNumbersCount,\n      initialSeconds = _ref.initialSeconds;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      randomNumbers = _useState2[0],\n      setRandomNumbers = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      target = _useState4[0],\n      setTarget = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      selectedNumbers = _useState6[0],\n      setSelectedNumbers = _useState6[1];\n\n  var _useState7 = useState(initialSeconds),\n      _useState8 = _slicedToArray(_useState7, 2),\n      remainingSeconds = _useState8[0],\n      setRemainingSeconds = _useState8[1];\n\n  var _useState9 = useState('PLAYING'),\n      _useState10 = _slicedToArray(_useState9, 2),\n      gameStatus = _useState10[0],\n      setGameStatus = _useState10[1];\n\n  var intervalId = useRef();\n  useEffect(function () {\n    return console.log(selectedNumbers);\n  }, [selectedNumbers]);\n  useEffect(function () {\n    var numbers = Array.from({\n      length: randomNumbersCount\n    }).map(function () {\n      return 1 + Math.floor(10 * Math.random());\n    });\n    var target = numbers.slice(0, randomNumbersCount - 2).reduce(function (acc, cur) {\n      return acc + cur;\n    }, 0);\n    setRandomNumbers(numbers);\n    setTarget(target);\n    intervalId.current = setInterval(function () {\n      return setRemainingSeconds(function (seconds) {\n        return seconds - 1;\n      });\n    }, 1000);\n    return function () {\n      return clearInterval(intervalId.current);\n    };\n  }, []);\n  useEffect(function () {\n    setGameStatus(function () {\n      return getGameStatus();\n    });\n\n    if (remainingSeconds === 0 || gameStatus !== 'PLAYING') {\n      clearInterval(intervalId.current);\n    }\n  }, [remainingSeconds, selectedNumbers]);\n\n  var isNumberSelected = function isNumberSelected(numberIndex) {\n    return selectedNumbers.some(function (number) {\n      return number === numberIndex;\n    });\n  };\n\n  var selectNumber = function selectNumber(number) {\n    setSelectedNumbers([].concat(_toConsumableArray(selectedNumbers), [number]));\n  };\n\n  var getGameStatus = function getGameStatus() {\n    var sumSelected = selectedNumbers.reduce(function (acc, cur) {\n      return acc + randomNumbers[cur];\n    }, 0);\n\n    if (remainingSeconds === 0 || sumSelected > target) {\n      return 'LOST';\n    } else if (sumSelected === target) {\n      return 'WON';\n    } else {\n      return 'PLAYING';\n    }\n  };\n\n  return _jsxs(View, {\n    children: [_jsx(Text, {\n      style: styles.target,\n      children: target\n    }), _jsx(Text, {\n      style: [styles.target, styles[gameStatus]],\n      children: gameStatus\n    }), _jsx(Text, {\n      children: remainingSeconds\n    }), _jsx(View, {\n      style: styles.randomContainer,\n      children: randomNumbers.map(function (number, index) {\n        return _jsx(Number, {\n          id: index,\n          number: number,\n          isSelected: isNumberSelected(index) || gameStatus !== 'PLAYING',\n          onSelected: selectNumber\n        }, index);\n      })\n    })]\n  });\n};\nvar styles = StyleSheet.create({\n  target: {\n    fontSize: 40,\n    backgroundColor: '#aaa',\n    textAlign: 'center'\n  },\n  randomContainer: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'space-between'\n  },\n  PLAYING: {\n    backgroundColor: '#bbb'\n  },\n  LOST: {\n    backgroundColor: 'red'\n  },\n  WON: {\n    backgroundColor: 'green'\n  }\n});","map":{"version":3,"sources":["E:/WEB DESING/UCREATIVA/MODULO 6/Taller 3 Clone/React-Native-Sumgame/components/Game.jsx"],"names":["React","useEffect","useState","useRef","Number","Game","randomNumbersCount","initialSeconds","randomNumbers","setRandomNumbers","target","setTarget","selectedNumbers","setSelectedNumbers","remainingSeconds","setRemainingSeconds","gameStatus","setGameStatus","intervalId","console","log","numbers","Array","from","length","map","Math","floor","random","slice","reduce","acc","cur","current","setInterval","seconds","clearInterval","getGameStatus","isNumberSelected","numberIndex","some","number","selectNumber","sumSelected","styles","randomContainer","index","StyleSheet","create","fontSize","backgroundColor","textAlign","flex","flexDirection","flexWrap","justifyContent","PLAYING","LOST","WON"],"mappings":"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","sourcesContent":["import { StyleSheet, Text, View } from \"react-native\";\r\nimport React, { useEffect, useState, useRef } from \"react\";\r\nimport Number from \"./Number\";\r\n\r\nexport default Game = ({ randomNumbersCount, initialSeconds }) => {\r\n  const [ randomNumbers, setRandomNumbers ] = useState([]);\r\n  const [ target, setTarget ] = useState();\r\n  const [ selectedNumbers, setSelectedNumbers ] = useState([]);\r\n  const [ remainingSeconds, setRemainingSeconds ] = useState(initialSeconds);\r\n  const [ gameStatus, setGameStatus ] = useState('PLAYING');\r\n\r\n  const intervalId = useRef();\r\n\r\n  useEffect(() => console.log(selectedNumbers), [selectedNumbers]);\r\n\r\n  useEffect(() => {\r\n    const numbers = Array.from({ length: randomNumbersCount}).map(() => 1 + Math.floor(10 * Math.random()));\r\n    const target = numbers.slice(0, randomNumbersCount -2).reduce( (acc, cur) => acc + cur, 0 );\r\n\r\n    setRandomNumbers(numbers);\r\n    setTarget(target);\r\n\r\n    intervalId.current = setInterval(() => setRemainingSeconds(seconds => seconds -1), 1000);\r\n    return () => clearInterval(intervalId.current);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setGameStatus(() =>  getGameStatus());\r\n    if (remainingSeconds  === 0 || gameStatus !== 'PLAYING') {\r\n      clearInterval(intervalId.current);\r\n    }\r\n  }, [remainingSeconds, selectedNumbers]);\r\n\r\n  const isNumberSelected = numberIndex => selectedNumbers.some(number => number === numberIndex);\r\n  const selectNumber = number => {\r\n    setSelectedNumbers([...selectedNumbers, number]);\r\n  };\r\n  const getGameStatus = () => {\r\n    const sumSelected = selectedNumbers.reduce((acc, cur) => acc + randomNumbers[cur], 0);\r\n    if (remainingSeconds === 0 || sumSelected > target) {\r\n      return 'LOST';\r\n    } else if (sumSelected === target) {\r\n      return 'WON';\r\n    } else {\r\n      return 'PLAYING';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Text style={styles.target}>{target}</Text>\r\n      <Text style={[ styles.target, styles[gameStatus] ]}>{gameStatus}</Text>\r\n      <Text>{remainingSeconds}</Text>\r\n      <View style={styles.randomContainer}>\r\n        {randomNumbers.map((number, index) => (\r\n          <Number\r\n            key={index}\r\n            id={index}\r\n            number={number}\r\n            isSelected={isNumberSelected(index) || gameStatus !== 'PLAYING'}\r\n            onSelected={selectNumber}\r\n          />\r\n        ))}\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  target: {\r\n    fontSize: 40,\r\n    backgroundColor: '#aaa',\r\n    textAlign: 'center',\r\n  },\r\n  randomContainer: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-between',\r\n  },\r\n  PLAYING: {\r\n    backgroundColor: '#bbb'\r\n  },\r\n  LOST: {\r\n    backgroundColor: 'red'\r\n  },\r\n  WON: {\r\n    backgroundColor: 'green'\r\n  },\r\n});\r\n"]},"metadata":{},"sourceType":"module"}